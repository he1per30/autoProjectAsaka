BROKER SCHEMA ad.testsystem.testapp.v1
PATH lbt.restutils.v1, mc.sync.v1;

DECLARE PARAM_OPER CONSTANT CHAR 'O';

DECLARE OPER_TEST CONSTANT CHAR 'T';

CREATE COMPUTE MODULE rq_ReqLogic
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE method CHAR InputLocalEnvironment.HTTP.Input.RequestLine.Method;
		DECLARE path CHAR InputLocalEnvironment.HTTP.Input.RequestLine.RequestURI;
		DECLARE params ROW;

		CALL CopyMessageHeaders();
		CASE
		WHEN checkMethodAndPath(
			method, 'POST',
			path, '/api/test',
			params
			) THEN
			CALL mapTest(params);
		ELSE
			SET OutputRoot.MQMD = NULL;
			SET OutputRoot.MQRFH2 = NULL;
			CALL setHTTPIIdHeader(InputRoot, OutputRoot, Environment);
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 405;
			SET Environment.Variables.Sync.Enable = FALSE;
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
			RETURN FALSE;
		END CASE;
		SET OutputRoot.HTTPInputHeader = NULL;	
		RETURN TRUE;
	END;
	
	
	CREATE PROCEDURE mapTest(IN params REFERENCE)
	BEGIN
		CALL setSyncParam(PARAM_OPER, OPER_TEST, Environment);
		CREATE LASTCHILD OF OutputRoot.JSON DOMAIN('JSON') NAME 'Data';
		DECLARE outJson REFERENCE TO OutputRoot.JSON.Data;
		DECLARE inJson REFERENCE TO InputRoot.JSON.Data;
		SET outJson.method = 'POST';
		SET outJson.resourceUrl = '/api/test';
		CALL saveAuthorizationHeaders(outJson, InputRoot);
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
