BROKER SCHEMA ad.testsystem.testapp.v1
PATH lbt.bpmutils.v1;

CREATE COMPUTE MODULE rs_ErrRespLogic
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputLocalEnvironment = InputLocalEnvironment;
		IF EXISTS(Environment.Variables.Request[]) THEN
			SET OutputRoot.MQMD = Environment.Variables.Request.MQMD;
			SET OutputRoot.MQMD.CorrelId = OutputRoot.MQMD.MsgId;
			DECLARE oper CHAR getBPMOperation(Environment.Variables.Request.XMLNSC.*:*[<]);
			DECLARE nsp NAMESPACE FIELDNAMESPACE(Environment.Variables.Request.XMLNSC.*:*[<]);
			CREATE LASTCHILD OF OutputRoot.XMLNSC DOMAIN('XMLNSC') NAMESPACE nsp NAME REPLACE(oper,'Request','Response');
			DECLARE outXml REFERENCE TO OutputRoot.XMLNSC.*:*[<];
			CASE nsp
			WHEN absn THEN
				SET outXml.absn:code = '405';
				SET outXml.absn:msg = 'Bad request';
			WHEN ml THEN
				SET outXml.ml:ErrorCode = '405';
				SET outXml.ml:ErrorDescription = 'Bad request';
			WHEN ktm THEN
				SET outXml.ktm:result = '405';
				SET outXml.ktm:resultMessage = 'Bad request';
			ELSE
				SET outXml.{nsp}:code = '405';
				SET outXml.{nsp}:msg = 'Bad request';
			END CASE;
			SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = CAST(Environment.Variables.Request.MQRFH2.usr AS BLOB);
		ELSE
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
